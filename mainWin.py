# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'DeepLearningSystem.ui'
#
# Created by: malianwei
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from qgis.core import QgsProject, QgsLayerTreeModel, QgsRasterLayer, QgsVectorLayer, QgsCoordinateReferenceSystem, QgsMapLayerType, QgsMapSettings
from qgis.gui import QgsMapCanvas, QgsLayerTreeView, QgsLayerTreeMapCanvasBridge, QgsMapToolPan,QgsMapToolZoom, QgsMapToolIdentifyFeature
from qgis.PyQt.QtWidgets import QAction, QMainWindow, QToolBar, QLabel, QHBoxLayout, QWidget, QFileDialog, QMessageBox
from qgis.PyQt.QtGui import QIcon, QPixmap
from qgis.PyQt.QtCore import Qt, QMimeData
from os.path import basename


class mainWindow(QMainWindow):

    def __init__(self):
        # 主窗口
        QMainWindow.__init__(self)
        self.resize(1200, 800)
        self.setWindowTitle("基于深度学习的遥感影像提取系统")  
        self.showMaximized()#最大化窗口       

        # 画布
        self.canvas = QgsMapCanvas()
        self.canvas.setCanvasColor(Qt.white)
        self.canvas.setVisible(True)
        self.canvas.xyCoordinates.connect(self.showXY)
        self.setAcceptDrops(True)# 允许拖拽文件   
        self.canvas.setDestinationCrs(QgsCoordinateReferenceSystem("EPSG:4326"))# 提前给予基本CRS

        # 图层管理器
        self.root = QgsProject.instance().layerTreeRoot()
        self.model = QgsLayerTreeModel(self.root,self)
        self.model.setFlag(QgsLayerTreeModel.AllowNodeReorder)
        self.model.setFlag(QgsLayerTreeModel.AllowNodeChangeVisibility)
        self.tocView = QgsLayerTreeView()
        self.tocView.setModel(self.model)
        self.tocView.setFixedWidth(300)
        self.bridge = QgsLayerTreeMapCanvasBridge(self.root, self.canvas,self)
        # 图层管理器中添加右键菜单
        from menu.ContextMenu import CustomMenuProvider
        self.customMenuProvider = CustomMenuProvider(self, self.tocView, self.canvas)
        self.tocView.setMenuProvider(self.customMenuProvider)

        # 按钮
        self.actionNewProject = QAction("新建工程", self)
        self.actionOpenProject = QAction("打开工程", self)
        self.actionSaveProject = QAction("保存工程", self)
        self.actionOpenRas = QAction("打开影像", self)
        self.actionOpenVec = QAction("打开矢量", self)
        self.actionZoomIn = QAction("放大工具", self)
        self.actionZoomOut = QAction("缩小工具", self)
        self.actionPan = QAction("平移工具", self)
        self.actionFullExtent = QAction("全图工具", self)  
        self.actionSelectFeature = QAction("选择要素",self) 
        self.actionDrawRect = QAction("画矩形", self)    
        self.actionClearDraw = QAction("清绘", self)
        self.actionSegment = QAction("地物提取", self)
        self.actionPostClump = QAction("聚类", self)
        self.actionRasterToVector = QAction("栅格转矢量", self)
        self.actionAbout = QAction("关于", self)
        self.setIcons()# 设置工具栏按钮图标

        self.actionZoomIn.setCheckable(True)#QAction对象设置为可选中状态
        self.actionZoomOut.setCheckable(True)
        self.actionPan.setCheckable(True)
        self.actionSelectFeature.setCheckable(True)

        # 绑定事件
        self.actionNewProject.triggered.connect(self.newProject)
        self.actionOpenProject.triggered.connect(self.openProject)
        self.actionSaveProject.triggered.connect(self.saveProject)
        self.actionOpenRas.triggered.connect(self.openDialogRas)
        self.actionOpenVec.triggered.connect(self.openDialogVec)
        self.actionZoomIn.triggered.connect(self.zoomIn)
        self.actionZoomOut.triggered.connect(self.zoomOut)
        self.actionPan.triggered.connect(self.pan)
        self.actionFullExtent.triggered.connect(self.fullExtent)
        self.actionSelectFeature.triggered.connect(self.selectFeature)
        self.actionDrawRect.triggered.connect(self.drawRect)
        self.actionClearDraw.triggered.connect(self.clearDraw)  
        self.actionSegment.triggered.connect(self.segment)
        self.actionPostClump.triggered.connect(self.postClump)
        self.actionRasterToVector.triggered.connect(self.rasterToVector) 
        self.actionAbout.triggered.connect(self.about) 

        # create the map tools
        self.toolPan = QgsMapToolPan(self.canvas)
        self.toolPan.setAction(self.actionPan)
        self.toolZoomIn = QgsMapToolZoom(self.canvas, False)  # false = in
        self.toolZoomIn.setAction(self.actionZoomIn)
        self.toolZoomOut = QgsMapToolZoom(self.canvas, True)  # true = out
        self.toolZoomOut.setAction(self.actionZoomOut)

        # 菜单栏
        menuBar = self.menuBar()# QMainWindow自带空的菜单栏、工具栏、状态栏
        fileMenu = menuBar.addMenu('文件')# 添加“文件”菜单
        viewMenu = menuBar.addMenu('视图')
        processMenu = menuBar.addMenu('处理')   
        helpMenu = menuBar.addMenu('帮助')   
        fileMenu.addAction(self.actionNewProject)# 将“新建工程”菜单项添加到“文件”菜单中
        fileMenu.addAction(self.actionOpenProject) 
        fileMenu.addAction(self.actionSaveProject)  
        fileMenu.addSeparator()                  
        fileMenu.addAction(self.actionOpenRas)
        fileMenu.addAction(self.actionOpenVec)
        viewMenu.addAction(self.actionZoomIn)
        viewMenu.addAction(self.actionZoomOut)
        viewMenu.addAction(self.actionPan)
        viewMenu.addAction(self.actionFullExtent)
        processMenu.addAction(self.actionSelectFeature)
        processMenu.addAction(self.actionDrawRect)
        processMenu.addAction(self.actionClearDraw)
        processMenu.addSeparator()
        processMenu.addAction(self.actionSegment)
        processMenu.addSeparator()
        processMenu.addAction(self.actionPostClump)
        processMenu.addAction(self.actionRasterToVector)
        helpMenu.addAction(self.actionAbout)

        # 工具栏
        toolBar = QToolBar("Canvas actions")
        self.addToolBar(toolBar)
        toolBar.addAction(self.actionNewProject)
        toolBar.addAction(self.actionOpenProject)
        toolBar.addAction(self.actionSaveProject)
        toolBar.addSeparator()
        toolBar.addAction(self.actionOpenRas)
        toolBar.addAction(self.actionOpenVec)
        toolBar.addSeparator()
        toolBar.addAction(self.actionZoomIn)
        toolBar.addAction(self.actionZoomOut)
        toolBar.addAction(self.actionPan)
        toolBar.addAction(self.actionFullExtent)
        toolBar.addSeparator()    
        toolBar.addAction(self.actionSelectFeature)   
        toolBar.addAction(self.actionDrawRect)
        from tools.RectangleMapTool import RectangleMapTool
        self.toolDrawRect = RectangleMapTool(self.canvas)       
        toolBar.addAction(self.actionClearDraw)
        toolBar.addSeparator()
        toolBar.addAction(self.actionSegment)  
        toolBar.addSeparator()   
        toolBar.addAction(self.actionPostClump)
        toolBar.addAction(self.actionRasterToVector)      
           
        # 状态栏
        statusBar = self.statusBar()  # 确保状态栏被创建
        statusBar.setSizeGripEnabled(False)  # 禁用大小调整手柄       
        self.progress_bar = QLabel(self)# 创建用于显示处理进度的进度条  
        self.coordinate_label = QLabel('{:<40}'.format(''))# 创建用于显示坐标信息的标签  #x y 坐标状态   
        self.crs_label = QLabel(f"坐标系: {self.canvas.mapSettings().destinationCrs().description()}")
        self.canvas.destinationCrsChanged.connect(self.showCrs)
        # 将进度条和标签添加到水平布局中
        layout = QHBoxLayout()
        layout.addWidget(self.progress_bar)
        layout.addStretch(1)  # 添加一个可伸缩的空间，使标签右对齐
        layout.addWidget(self.crs_label)
        layout.addWidget(self.coordinate_label)
        layout.setSpacing(5)  # 设置小部件之间的间距
        layout.setContentsMargins(0, 0, 0, 0)  # 设置布局的边距为0
        # 创建一个容器小部件来包含布局
        container = QWidget()
        container.setLayout(layout)
        # 将容器小部件添加到状态栏中
        statusBar.addWidget(container, 1)  # 1表示伸展因子，使容器占据剩余空间
        # 为容器小部件设置样式表以添加边框
        container.setStyleSheet("""
            QWidget {               
                padding: 5px; /* 设置内边距为5像素 */
            }
        """)

        # 主窗口布局
        centralWidget = QWidget()
        hLayout = QHBoxLayout()
        hLayout.addWidget(self.tocView)
        hLayout.addWidget(self.canvas)
        centralWidget.setLayout(hLayout)
        self.setCentralWidget(centralWidget)

        self.pan()# 设置默认功能

    def zoomIn(self):
        self.canvas.setMapTool(self.toolZoomIn)

    def zoomOut(self):
        self.canvas.setMapTool(self.toolZoomOut)

    def pan(self):
        self.canvas.setMapTool(self.toolPan)

    def fullExtent(self):
        self.canvas.zoomToFullExtent()

    def selectFeature(self):
        if self.actionSelectFeature.isChecked():
            if self.canvas.mapTool():
                self.canvas.unsetMapTool(self.canvas.mapTool())
            self.toolSelectFeature = QgsMapToolIdentifyFeature(self.canvas)
            self.toolSelectFeature.setAction(self.actionSelectFeature)
            self.toolSelectFeature.setCursor(Qt.ArrowCursor)
            self.toolSelectFeature.featureIdentified.connect(self.selectToolIdentified)
            layers = self.canvas.layers()
            if layers:
                self.toolSelectFeature.setLayer(self.tocView.currentLayer())
            self.canvas.setMapTool(self.toolSelectFeature)
        else:
            if self.canvas.mapTool():
                self.canvas.unsetMapTool(self.canvas.mapTool())

    def selectToolIdentified(self,feature):
        #print(feature.id())
        layerTemp: QgsVectorLayer = self.tocView.currentLayer()
        if layerTemp.type() == QgsMapLayerType.VectorLayer:
            if feature.id() in layerTemp.selectedFeatureIds():
                layerTemp.deselect(feature.id())
            else:
                layerTemp.removeSelection()
                layerTemp.select(feature.id())

    def drawRect(self):  
        from tools.RectangleMapTool import RectangleMapTool
        self.toolDrawRect = RectangleMapTool(self.canvas)
        self.toolDrawRect.setAction(self.actionDrawRect)
        self.canvas.setMapTool(self.toolDrawRect)

    def clearDraw(self):  
        self.toolDrawRect.reset()    
        self.canvas.scene().removeItem(self.toolDrawRect.rubberBand)
        self.pan()

    def about(self):
        import datetime,json
        from cryptography.fernet import Fernet
        # 从文件加载密钥
        with open('./license/secret.key', 'rb') as key_file:
            key = key_file.read()           
        # 创建Fernet对象
        fernet = Fernet(key)

        with open('./license/license.lic', "rb") as f:
            encrypted_license = f.read()         
        license_json = fernet.decrypt(encrypted_license).decode()
        license_data = json.loads(license_json)
        software_version = license_data.get("software_version")
        user_id = license_data.get("user_id")
        expiration_date = license_data.get("expiration_date")
        QMessageBox.information(self, '提示', 
                                f'软件信息：基于深度学习的遥感影像信息提取系统\n构建日期：2024-12-31\n版权所有：河南省地球物理空间信息研究院有限公司\n技术邮箱：malianwei2009@163.com\n许可截至：{expiration_date}',
                                  QMessageBox.Ok)
    # 栅格转矢量
    def rasterToVector(self):
        from dialog.RasterToVectorDialog import Ui_Dialog
        from PyQt5.QtWidgets import QDialog
        # 创建一个对话框实例，这里我们假设对话框是基于 QDialog 的
        self.dialog = QDialog(self)
        self.ui_raserToVector = Ui_Dialog()
        self.ui_raserToVector.setupUi(self.dialog)
        # 显示对话框
        result = self.dialog.exec_()  # 这会阻塞，直到对话框关闭
 
        if result == QDialog.Accepted:
            from algorithm.RasterToVectorThread import RasterToVectorThread
            self.thread = RasterToVectorThread(self.ui_raserToVector, self.progress_bar)
            self.thread.finished.connect(self.on_rasterToVector_finished)  # 连接信号到槽
            self.thread.start()
        elif result == QDialog.Rejected:
            print("User clicked Close or pressed Escape")

    def on_rasterToVector_finished(self, result):
        print(result)  # 在主线程中处理结果
        self.addVector(result)

    # 分类后处理-聚类
    def postClump(self):
        from dialog.PostProcessDialog import Ui_Dialog
        from PyQt5.QtWidgets import QDialog
        # 创建一个对话框实例，这里我们假设对话框是基于 QDialog 的
        self.dialog = QDialog(self)
        self.ui_postProcessDialog = Ui_Dialog()
        self.ui_postProcessDialog.setupUi(self.dialog)
        # 显示对话框
        result = self.dialog.exec_()  # 这会阻塞，直到对话框关闭
 
        if result == QDialog.Accepted:
            from algorithm.PostClumpThread import PostClumpThread
            self.thread = PostClumpThread(self.ui_postProcessDialog, self.progress_bar, self.toolDrawRect)
            self.thread.finished.connect(self.on_postclump_finished)  # 连接信号到槽
            self.thread.start()
        elif result == QDialog.Rejected:
            print("User clicked Close or pressed Escape")

    def on_postclump_finished(self, result):
        print(result)  # 在主线程中处理结果
        self.addRaster(result)

    def setIcons(self):
        # 设置图标
        icon_mainWindow = QIcon()
        icon_mainWindow.addPixmap(QPixmap("./settings/icon/mainWindow.png"), QIcon.Normal, QIcon.Off)
        self.setWindowIcon(icon_mainWindow)

        icon_newProject = './settings/icon/SystemProject_NewProject.png'# 替换为你的图标文件路径
        self.actionNewProject.setIcon(QIcon(icon_newProject))

        icon_openProject = './settings/icon/SystemProject_OpenProject.png'
        self.actionOpenProject.setIcon(QIcon(icon_openProject))

        icon_saveProject = './settings/icon/SystemProject_SaveProject.png'
        self.actionSaveProject.setIcon(QIcon(icon_saveProject))

        icon_openImage = './settings/icon/DataLoader_Raster.png'
        self.actionOpenRas.setIcon(QIcon(icon_openImage))

        icon_openVector = './settings/icon/DataLoader_Vector.png'
        self.actionOpenVec.setIcon(QIcon(icon_openVector))

        icon_zoonIn = './settings/icon/MapBrowser_ZoomIn.png'  
        self.actionZoomIn.setIcon(QIcon(icon_zoonIn))

        icon_zoonOut = './settings/icon/MapBrowser_ZoomOut.png'
        self.actionZoomOut.setIcon(QIcon(icon_zoonOut))

        icon_Pan = './settings/icon/MapBrowser_Pan.png'
        self.actionPan.setIcon(QIcon(icon_Pan))

        icon_FullExten = './settings/icon/MapBrowser_FullExtent.png'
        self.actionFullExtent.setIcon(QIcon(icon_FullExten))
        
        icon_SeclectFeature = './settings/icon/MarkTool_SelectElement.png'
        self.actionSelectFeature.setIcon(QIcon(icon_SeclectFeature))

        icon_DrawRect = './settings/icon/MarkTool_DrawRectElement.png'
        self.actionDrawRect.setIcon(QIcon(icon_DrawRect))       
        
        icon_ClearDraw = './settings/icon/MainCategory_DeleteAllSelect.png'  
        self.actionClearDraw.setIcon(QIcon(icon_ClearDraw))       

        icon_Segment = './settings/icon/Segment.png' 
        self.actionSegment.setIcon(QIcon(icon_Segment))

        icon_PostClump = './settings/icon/ImgClass_Post_Clump.png' 
        self.actionPostClump.setIcon(QIcon(icon_PostClump))
        
        icon_RasterToVector = './settings/icon/Utility_RasterToVector.png'
        self.actionRasterToVector.setIcon(QIcon(icon_RasterToVector))

        icon_About = './settings/icon/MainCategory_About.png'
        self.actionAbout.setIcon(QIcon(icon_About))
    
    # 新建工程
    def newProject(self):
        # 创建一个新的项目
        project = QgsProject.instance()
        project.clear()  # 清除当前项目中的所有内容（如果有的话）
        
        # 设置项目的CRS（可选）
        # 例如，使用WGS 84坐标系统
        crs = QgsCoordinateReferenceSystem()
        crs.createFromId(4326, QgsCoordinateReferenceSystem.EpsgCrsId)
        project.setCrs(crs)
        
        # 保存新项目到文件（例如：new_project.qgs）
        project.writeEntry("qgis", "/projectTitle", "New Project")  # 设置项目标题（可选）
        project.setFileName("./temp/new_project.qgs")
        project.write()

        self.setWindowTitle("new_project.qgs - 基于深度学习的遥感影像提取系统") 

    # 保存工程
    def saveProject(self):
        path_to_project = self.windowTitle().split(" - ")[0]
        # 获取当前项目实例
        project = QgsProject.instance() 
        if path_to_project == "new_project.qgs":
            path_to_project,_ = QFileDialog.getSaveFileName (self, '保存工程', '', 'Project File (*.qgs);;All Files (*.*)')
            if  path_to_project == "":# 如果用户取消了选择，则返回空字符串
                return               
            # 设置要保存的文件路径和文件名
            #project.setFileName(path_to_project)   
            # 保存项目到指定文件
            project.write(path_to_project)
            self.setWindowTitle(f"{basename(path_to_project)} - 基于深度学习的遥感影像提取系统") 
        else:
            project.write()

    # 打开工程
    def openProject(self):
        path_to_project,_ = QFileDialog.getOpenFileName (self, '打开工程', '', 'Project File (*.qgs);;All Files (*.*)')
        if  path_to_project == "":# 如果用户取消了选择，则返回空字符串
            return
        self.addProject(path_to_project)  

    # 打开影像
    def openDialogRas(self):
        path_to_tif,_ = QFileDialog.getOpenFileName(self, '打开', '', 'Raster Files (*.tif;*.tiff;*.img;*.dat);;All Files (*.*)')
        if  path_to_tif=="":# 如果用户取消了选择，则返回空字符串
            return
        self.addRaster(path_to_tif)

    # 打开矢量
    def openDialogVec(self):
        path_to_vec, _ = QFileDialog.getOpenFileName(self, '打开', '', 'Vector Files (*.shp);;All Files (*.*)')
        if  path_to_vec=="":
            return
        self.addVector(path_to_vec)
         
    # 信息提取
    def segment(self, path):
        #QMessageBox.information(self, '提示', '信息提取！', QMessageBox.Ok)
        from dialog.SegmentDialog import Ui_Dialog
        from PyQt5.QtWidgets import QDialog
        # 创建一个对话框实例，这里我们假设对话框是基于 QDialog 的
        self.dialog = QDialog(self)
        self.ui = Ui_Dialog()
        self.ui.setupUi(self.dialog)
        # 显示对话框
        result = self.dialog.exec_()  # 这会阻塞，直到对话框关闭
 
        if result == QDialog.Accepted:
            from algorithm.PredictThread import PredictThread
            self.thread = PredictThread(self.ui, self.progress_bar, self.toolDrawRect)
            self.thread.finished.connect(self.on_segment_finished)  # 连接信号到槽
            self.thread.start()    
        elif result == QDialog.Rejected:
            print("User clicked Close or pressed Escape")

    def on_segment_finished(self, result):
        print(result)  # 在主线程中处理结果
        self.addRaster(result)

    def addRaster(self, path):
        layer = QgsRasterLayer(path,basename(path))
        if not layer.isValid():
            QMessageBox.information(self, '提示', '文件打开失败', QMessageBox.Ok)
            return
        layer.dataProvider().setNoDataValue(1,0)
        QgsProject.instance().addMapLayers([layer])
        self.canvas.setLayers([layer])
        self.canvas.setExtent(layer.extent())
        self.canvas.setDestinationCrs(layer.crs())
        self.canvas.refresh()
    
    def addVector(self, path):
        layer = QgsVectorLayer(path,basename(path))
        if not layer.isValid():
            QMessageBox.information(self, '提示', '文件打开失败', QMessageBox.Ok)
            return   

        # 构造一个嵌入的渲染器
        from qgis.core import QgsFillSymbol, QgsSingleSymbolRenderer,QgsInvertedPolygonRenderer
        from qgis.PyQt.QtGui import QColor
        fill_props = {}
        fill_props["color"] = QColor(0, 0, 0, 0)
        fill_props["color_border"] = 'red'
        fill = QgsFillSymbol.createSimple(fill_props)
        embededRenderer = QgsSingleSymbolRenderer(fill)

        # 构造 QgsInvertedPolygonRenderer，并赋给多边形图层
        renderer = QgsInvertedPolygonRenderer(embededRenderer)
        layer.setRenderer(renderer)

        QgsProject.instance().addMapLayers([layer])
        self.canvas.setLayers([layer])
        self.canvas.setExtent(layer.extent())
        self.canvas.setDestinationCrs(layer.crs())
        self.canvas.refresh()

    def addProject(self, path):
        # 获取 QgsProject 的实例
        project = QgsProject.instance()             
        # 尝试加载工程文件
        success = project.read(path)
        # 检查加载是否成功
        if not success:
            print(f"Failed to load project: {path}")
        else:
            print("Project loaded successfully")
        self.setWindowTitle(f"{basename(path)} - 基于深度学习的遥感影像提取系统") 
        QgsLayerTreeMapCanvasBridge(project.layerTreeRoot(), self.canvas)        

    def showXY(self,point):
        x = point.x()
        y = point.y()
        self.coordinate_label.setText(f'{x:.6f}, {y:.6f}')
        #self.coordinate_label.setText("Coordinate:"+str(point.x())+","+str(point.y()))

    def dragEnterEvent(self, fileData):
        if fileData.mimeData().hasUrls():
            fileData.accept()
        else:
            fileData.ignore()

    # 拖拽文件事件
    def dropEvent(self,fileData):
        mimeData: QMimeData = fileData.mimeData()
        filePathList = [u.path()[1:] for u in mimeData.urls()]
        for filePath in filePathList:
            filePath:str = filePath.replace("/","//")
            if filePath.split(".")[-1] in ["tif","TIF","tiff","TIFF","GTIFF","png","jpg","pdf","img"]:
                self.addRaster(filePath)
            elif filePath.split(".")[-1] in ["shp","SHP","gpkg","geojson","kml"]:
                self.addVector(filePath)
            elif filePath.split(".")[-1] in ["qgs"]:
                self.addProject(filePath)
            elif filePath == "":
                pass
            else:
                QMessageBox.about(self, '警告', f'{filePath}为不支持的文件类型，目前支持栅格影像和shp矢量')

    def showCrs(self):
        mapSetting : QgsMapSettings = self.canvas.mapSettings()
        self.crs_label.setText(f"坐标系: {mapSetting.destinationCrs().description()}")
            
            