# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'QuerySampleDialog.ui'
#
# Created by: qgis.PyQt UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from qgis.PyQt import QtCore, QtGui, QtWidgets
from qgis.PyQt.QtGui import QStandardItemModel, QStandardItem
from qgis.PyQt.QtCore import Qt
from xml.dom import minidom

class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(815, 71)
        Dialog.setMinimumSize(QtCore.QSize(0, 0))
        Dialog.setMaximumSize(QtCore.QSize(16777215, 16777215))
        Dialog.setWindowFlags(Dialog.windowFlags() & ~(QtCore.Qt.WindowContextHelpButtonHint)) # 隐藏对话框标题栏默认的问号按钮
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("settings/icon/Query.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        Dialog.setWindowIcon(icon)
        self.gridLayout_3 = QtWidgets.QGridLayout(Dialog)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.verticalLayoutMain = QtWidgets.QVBoxLayout()
        self.verticalLayoutMain.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.verticalLayoutMain.setContentsMargins(-1, 0, -1, -1)
        self.verticalLayoutMain.setObjectName("verticalLayoutMain")
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.label_4 = QtWidgets.QLabel(Dialog)
        self.label_4.setObjectName("label_4")
        self.label_4.setMaximumSize(QtCore.QSize(40, 23))
        self.gridLayout.addWidget(self.label_4, 0, 6, 1, 1)
        self.comboBox_Type = QtWidgets.QComboBox(Dialog)
        self.comboBox_Type.setEnabled(False)
        self.comboBox_Type.setMinimumSize(QtCore.QSize(0, 0))
        self.comboBox_Type.setMaximumSize(QtCore.QSize(50, 20))
        self.comboBox_Type.setEditable(True)
        self.comboBox_Type.setObjectName("comboBox_Type")
        self.comboBox_Type.activated.connect(self.on_comboBox_Type_activated)# 将 QComboBox 的 currentIndexChanged 信号连接到槽函数
        self.gridLayout.addWidget(self.comboBox_Type, 0, 5, 1, 1)
        self.label_1 = QtWidgets.QLabel(Dialog)
        self.label_1.setObjectName("label_1")
        self.label_1.setMaximumSize(QtCore.QSize(55, 23))
        self.gridLayout.addWidget(self.label_1, 0, 0, 1, 1)
        self.comboBox_Class = QtWidgets.QComboBox(Dialog)
        self.comboBox_Class.setEditable(True)
        self.comboBox_Class.setCurrentText("")
        self.comboBox_Class.setObjectName("comboBox_Class") 
        self.comboBox_Class.setMaximumSize(QtCore.QSize(85, 20))     
        self.comboBox_Class.activated.connect(self.on_comboBox_Class_activated)# 将 QComboBox 的 currentIndexChanged 信号连接到槽函数
        self.gridLayout.addWidget(self.comboBox_Class, 0, 1, 1, 1)
        self.label_5 = QtWidgets.QLabel(Dialog)
        self.label_5.setObjectName("label_5")
        self.label_5.setMaximumSize(QtCore.QSize(30, 23))
        self.gridLayout.addWidget(self.label_5, 0, 8, 1, 1)
        self.comboBox_Name = QtWidgets.QComboBox(Dialog)
        self.comboBox_Name.setEnabled(False)
        self.comboBox_Name.setMinimumSize(QtCore.QSize(0, 0))
        self.comboBox_Name.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.comboBox_Name.setEditable(True)
        self.comboBox_Name.setObjectName("comboBox_Name")
        self.gridLayout.addWidget(self.comboBox_Name, 0, 9, 1, 1)
        self.label_3 = QtWidgets.QLabel(Dialog)
        self.label_3.setObjectName("label_3")
        self.label_3.setMaximumSize(QtCore.QSize(30, 23))
        self.gridLayout.addWidget(self.label_3, 0, 4, 1, 1)
        self.label_2 = QtWidgets.QLabel(Dialog)
        self.label_2.setObjectName("label_2")
        self.label_2.setMaximumSize(QtCore.QSize(30, 23))
        self.gridLayout.addWidget(self.label_2, 0, 2, 1, 1)
        self.comboBox_Size = QtWidgets.QComboBox(Dialog)
        self.comboBox_Size.setEnabled(False)
        self.comboBox_Size.setEditable(True)
        self.comboBox_Size.setCurrentText("")
        self.comboBox_Size.setObjectName("comboBox_Size")
        self.comboBox_Size.setMaximumSize(QtCore.QSize(50, 20))
        self.comboBox_Size.activated.connect(self.on_comboBox_Size_activated)# 将 QComboBox 的 currentIndexChanged 信号连接到槽函数
        self.gridLayout.addWidget(self.comboBox_Size, 0, 3, 1, 1)
        self.comboBox_GSD = QtWidgets.QComboBox(Dialog)
        self.comboBox_GSD.setEnabled(False)
        self.comboBox_GSD.setMinimumSize(QtCore.QSize(0, 0))
        self.comboBox_GSD.setMaximumSize(QtCore.QSize(75, 20))
        self.comboBox_GSD.setEditable(True)
        self.comboBox_GSD.setObjectName("comboBox_GSD")
        self.comboBox_GSD.activated.connect(self.on_comboBox_GSD_activated)# 将 QComboBox 的 currentIndexChanged 信号连接到槽函数
        self.gridLayout.addWidget(self.comboBox_GSD, 0, 7, 1, 1)
        self.pushButton_querySample = QtWidgets.QPushButton(Dialog)
        self.pushButton_querySample.setObjectName("pushButton_querySample")
        self.pushButton_querySample.setMaximumSize(QtCore.QSize(50, 23))
        self.pushButton_querySample.clicked.connect(Dialog.accept)#####################
        self.gridLayout.addWidget(self.pushButton_querySample, 0, 10, 1, 1)
        self.verticalLayoutMain.addLayout(self.gridLayout)
        self.gridLayout_3.addLayout(self.verticalLayoutMain, 1, 0, 1, 1)

        self.retranslateUi(Dialog)       
        QtCore.QMetaObject.connectSlotsByName(Dialog)
        self.comboBox_Class.clear()     
        # XML文件的路径
        from DeeplearningSystem import sample_cofing_path
        # 解析XML文件
        dom = minidom.parse(sample_cofing_path)#Samples
        # 获取根元素
        root = dom.documentElement
        # 遍历根元素的子元素
        for child in root.childNodes:#SampleClass
            # 检查节点类型，确保它是ELEMENT_NODE（即元素节点）
            if child.nodeType == child.ELEMENT_NODE:
                # 打印子元素的标签名、属性和文本内容
                #print(f"Child element: {child.tagName}")#SampleClass
                for attr, attr_value in child.attributes.items():  
                    #print(f"attr: {attr}") 
                    if(attr=='Name'):
                        self.comboBox_Class.addItem(attr_value)
        self.comboBox_Class.setCurrentIndex(-1)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "样本库查询"))
        self.label_4.setText(_translate("Dialog", "分辨率："))
        self.label_1.setText(_translate("Dialog", "样本类别："))
        self.label_5.setText(_translate("Dialog", "名称："))
        self.label_3.setText(_translate("Dialog", "类型："))
        self.label_2.setText(_translate("Dialog", "尺寸："))
        self.pushButton_querySample.setText(_translate("Dialog", "查询"))

    # 定义槽函数，用于响应 QComboBox 的选择变化
    def on_comboBox_Class_activated(self, index):
        self.comboBox_Size.clear()
        self.comboBox_Size.setEnabled(True)       
        selected_text = self.comboBox_Class.currentText()  # 获取当前选中的文本
        # XML文件的路径
        from DeeplearningSystem import sample_cofing_path
        # 解析XML文件
        dom = minidom.parse(sample_cofing_path)#Samples
        # 获取根元素
        root = dom.documentElement
        # 遍历根元素的子元素
        for child in root.childNodes:#SampleClass
            # 检查节点类型，确保它是ELEMENT_NODE（即元素节点）
            if child.nodeType == child.ELEMENT_NODE:
                # 打印子元素的标签名、属性和文本内容
                #print(f"Child element: {child.tagName}")#ModelClass
                for __, attr_value in child.attributes.items():  
                    #print(f"attr_value: {attr_value}")                         
                    if attr_value == selected_text:                                   
                        for child2 in child.childNodes:#ModelType
                            if child2.nodeType == child2.ELEMENT_NODE:
                                #print(f"child2 element: {child2.tagName}")#ModelType
                                for attr, attr_value2 in child2.attributes.items():                           
                                    if(attr=='Size'):
                                        if self.comboBox_Size.findText(attr_value2) == -1:  # 检查是否已存在
                                            self.comboBox_Size.addItem(attr_value2)
        self.comboBox_Size.setCurrentIndex(-1)

    def on_comboBox_Size_activated(self, index):
        self.comboBox_Type.clear()
        self.comboBox_Type.setEnabled(True)
        selected_text = self.comboBox_Class.currentText()  # 获取当前选中的文本
        # XML文件的路径
        from DeeplearningSystem import sample_cofing_path
        # 解析XML文件
        dom = minidom.parse(sample_cofing_path)#Samples
        # 获取根元素
        root = dom.documentElement
        # 遍历根元素的子元素
        for child in root.childNodes:#SampleClass
            # 检查节点类型，确保它是ELEMENT_NODE（即元素节点）
            if child.nodeType == child.ELEMENT_NODE:
                # 打印子元素的标签名、属性和文本内容
                #print(f"Child element: {child.tagName}")#ModelClass
                for __, attr_value in child.attributes.items():  
                    #print(f"attr_value: {attr_value}")                         
                    if attr_value == selected_text:                                   
                        for child2 in child.childNodes:#ModelType
                            if child2.nodeType == child2.ELEMENT_NODE:
                                #print(f"child2 element: {child2.tagName}")#ModelType
                                for attr, attr_value2 in child2.attributes.items():                           
                                    if(attr=='Type'):
                                        #print(f"attr_value: {attr_value2}")
                                        if self.comboBox_Type.findText(attr_value2) == -1:  # 检查是否已存在
                                            self.comboBox_Type.addItem(attr_value2)
        self.comboBox_Type.setCurrentIndex(-1)

    def on_comboBox_Type_activated(self, index):
        self.comboBox_GSD.clear()
        self.comboBox_GSD.setEnabled(True)
        selected_text = self.comboBox_Class.currentText()  # 获取当前选中的文本
        # XML文件的路径
        from DeeplearningSystem import sample_cofing_path
        # 解析XML文件
        dom = minidom.parse(sample_cofing_path)#Samples
        # 获取根元素
        root = dom.documentElement
        # 遍历根元素的子元素
        for child in root.childNodes:#SampleClass
            # 检查节点类型，确保它是ELEMENT_NODE（即元素节点）
            if child.nodeType == child.ELEMENT_NODE:
                # 打印子元素的标签名、属性和文本内容
                #print(f"Child element: {child.tagName}")#ModelClass
                for __, attr_value in child.attributes.items():  
                    #print(f"attr_value: {attr_value}")                         
                    if attr_value == selected_text:                                   
                        for child2 in child.childNodes:#ModelType
                            if child2.nodeType == child2.ELEMENT_NODE:
                                #print(f"child2 element: {child2.tagName}")#ModelType
                                for attr, attr_value2 in child2.attributes.items():                           
                                    if(attr=='GSD'):
                                        #print(f"attr_value: {attr_value2}")
                                        if self.comboBox_GSD.findText(attr_value2) == -1:  # 检查是否已存在
                                            self.comboBox_GSD.addItem(attr_value2)
        self.comboBox_GSD.setCurrentIndex(-1)

    def on_comboBox_GSD_activated(self, index):
        self.comboBox_Name.clear()
        self.comboBox_Name.setEnabled(True)
        selected_text = self.comboBox_Class.currentText()  # 获取当前选中的文本
        # XML文件的路径
        from DeeplearningSystem import sample_cofing_path
        # 解析XML文件
        dom = minidom.parse(sample_cofing_path)#Samples
        # 获取根元素
        root = dom.documentElement
        # 遍历根元素的子元素
        for child in root.childNodes:#SampleClass
            # 检查节点类型，确保它是ELEMENT_NODE（即元素节点）
            if child.nodeType == child.ELEMENT_NODE:
                # 打印子元素的标签名、属性和文本内容
                #print(f"Child element: {child.tagName}")#ModelClass
                for __, attr_value in child.attributes.items():  
                    #print(f"attr_value: {attr_value}")                         
                    if attr_value == selected_text:                                   
                        for child2 in child.childNodes:#ModelType
                            if child2.nodeType == child2.ELEMENT_NODE:
                                #print(f"child2 element: {child2.tagName}")#ModelType
                                for attr, attr_value2 in child2.attributes.items():                           
                                    if(attr=='Name'):
                                        #print(f"attr_value: {attr_value2}")
                                        if self.comboBox_Name.findText(attr_value2) == -1:  # 检查是否已存在
                                            self.comboBox_Name.addItem(attr_value2)
        self.comboBox_Name.setCurrentIndex(-1)