# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'TrainDialog.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox, QCheckBox, QHBoxLayout, QWidget
from PyQt5.QtGui import QStandardItemModel, QStandardItem
from PyQt5.QtCore import Qt
from xml.dom import minidom


class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(514, 394)
        Dialog.setMinimumSize(QtCore.QSize(0, 0))
        Dialog.setWindowFlags(Dialog.windowFlags() & ~(QtCore.Qt.WindowContextHelpButtonHint)) # 隐藏对话框标题栏默认的问号按钮
        Dialog.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.gridLayout_3 = QtWidgets.QGridLayout(Dialog)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.horizontalLayout_1 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_1.setObjectName("horizontalLayout_1")
        self.verticalLayoutMain = QtWidgets.QVBoxLayout()
        self.verticalLayoutMain.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.verticalLayoutMain.setObjectName("verticalLayoutMain")
        self.groupBox_SelectSample = QtWidgets.QGroupBox(Dialog)
        self.groupBox_SelectSample.setObjectName("groupBox_SelectSample")
        self.horizontalLayout_openImage = QtWidgets.QHBoxLayout(self.groupBox_SelectSample)
        self.horizontalLayout_openImage.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.horizontalLayout_openImage.setContentsMargins(9, 9, 9, 9)
        self.horizontalLayout_openImage.setSpacing(6)
        self.horizontalLayout_openImage.setObjectName("horizontalLayout_openImage")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label = QtWidgets.QLabel(self.groupBox_SelectSample)
        self.label.setMaximumSize(QtCore.QSize(70, 16777215))
        self.label.setObjectName("label")
        self.horizontalLayout.addWidget(self.label)
        self.comboBox_sampleClass = QtWidgets.QComboBox(self.groupBox_SelectSample)
        self.comboBox_sampleClass.setEnabled(True)
        self.comboBox_sampleClass.setMinimumSize(QtCore.QSize(0, 0))
        self.comboBox_sampleClass.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.comboBox_sampleClass.setEditable(True)
        self.comboBox_sampleClass.setObjectName("comboBox_sampleClass")
        self.comboBox_sampleClass.addItems(["building", "road", "mine", "water", "forest", "pv", "greenhouse", "desert"])
        self.horizontalLayout.addWidget(self.comboBox_sampleClass)
        self.pushButton_QuerySample = QtWidgets.QPushButton(self.groupBox_SelectSample)
        self.pushButton_QuerySample.setMinimumSize(QtCore.QSize(71, 23))
        self.pushButton_QuerySample.setMaximumSize(QtCore.QSize(71, 23))
        self.pushButton_QuerySample.setObjectName("pushButton_QuerySample")
        self.pushButton_QuerySample.clicked.connect(self.on_querySample_clicked)#####################
        self.horizontalLayout.addWidget(self.pushButton_QuerySample)
        self.verticalLayout_4.addLayout(self.horizontalLayout)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setContentsMargins(-1, -1, -1, 6)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.checkBox = QtWidgets.QCheckBox(self.groupBox_SelectSample)
        self.checkBox.setMinimumSize(QtCore.QSize(15, 15))
        self.checkBox.setMaximumSize(QtCore.QSize(10, 10))
        self.checkBox.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.checkBox.setText("")
        self.checkBox.setObjectName("checkBox")
        self.horizontalLayout_2.addWidget(self.checkBox)
        self.label_7 = QtWidgets.QLabel(self.groupBox_SelectSample)
        self.label_7.setMinimumSize(QtCore.QSize(0, 0))
        self.label_7.setObjectName("label_7")
        self.horizontalLayout_2.addWidget(self.label_7)
        self.verticalLayout_2.addLayout(self.horizontalLayout_2)
        self.tableView_sampleList = QtWidgets.QTableView(self.groupBox_SelectSample)
        self.tableView_sampleList.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.tableView_sampleList.setObjectName("tableView_sampleList")
        self.tableView_sampleList.horizontalHeader().setCascadingSectionResizes(False)
        self.verticalLayout_2.addWidget(self.tableView_sampleList)
        self.verticalLayout_4.addLayout(self.verticalLayout_2)
        self.horizontalLayout_openImage.addLayout(self.verticalLayout_4)
        self.verticalLayoutMain.addWidget(self.groupBox_SelectSample)
        self.groupBox_setPara = QtWidgets.QGroupBox(Dialog)
        self.groupBox_setPara.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.groupBox_setPara.setCheckable(False)
        self.groupBox_setPara.setObjectName("groupBox_setPara")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.groupBox_setPara)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.label_3 = QtWidgets.QLabel(self.groupBox_setPara)
        self.label_3.setObjectName("label_3")
        self.gridLayout.addWidget(self.label_3, 1, 0, 1, 1)
        self.lineEdit_learningRate = QtWidgets.QLineEdit(self.groupBox_setPara)
        self.lineEdit_learningRate.setObjectName("lineEdit_learningRate")
        self.gridLayout.addWidget(self.lineEdit_learningRate, 0, 3, 1, 1)
        self.label_5 = QtWidgets.QLabel(self.groupBox_setPara)
        self.label_5.setObjectName("label_5")
        self.gridLayout.addWidget(self.label_5, 1, 2, 1, 1)
        self.label_6 = QtWidgets.QLabel(self.groupBox_setPara)
        self.label_6.setObjectName("label_6")
        self.gridLayout.addWidget(self.label_6, 0, 2, 1, 1)
        self.lineEdit_batch = QtWidgets.QLineEdit(self.groupBox_setPara)
        self.lineEdit_batch.setObjectName("lineEdit_batch")
        self.gridLayout.addWidget(self.lineEdit_batch, 1, 3, 1, 1)
        self.lineEdit_epoch = QtWidgets.QLineEdit(self.groupBox_setPara)
        self.lineEdit_epoch.setObjectName("lineEdit_epoch")
        self.gridLayout.addWidget(self.lineEdit_epoch, 1, 1, 1, 1)
        self.comboBox_modelNet = QtWidgets.QComboBox(self.groupBox_setPara)
        self.comboBox_modelNet.setEditable(True)
        self.comboBox_modelNet.setObjectName("comboBox_modelNet")
        self.comboBox_modelNet.addItems([ "AUNet", "UNet", "DeepLabV3Plus" ])
        self.gridLayout.addWidget(self.comboBox_modelNet, 0, 1, 1, 1)
        self.label_4 = QtWidgets.QLabel(self.groupBox_setPara)
        self.label_4.setObjectName("label_4")
        self.gridLayout.addWidget(self.label_4, 0, 0, 1, 1)
        self.verticalLayout_3.addLayout(self.gridLayout)
        self.verticalLayoutMain.addWidget(self.groupBox_setPara)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout_saveImage = QtWidgets.QHBoxLayout()
        self.horizontalLayout_saveImage.setObjectName("horizontalLayout_saveImage")
        self.label_2 = QtWidgets.QLabel(Dialog)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_saveImage.addWidget(self.label_2)
        self.lineEdit_saveModelPath = QtWidgets.QLineEdit(Dialog)
        self.lineEdit_saveModelPath.setMinimumSize(QtCore.QSize(0, 0))
        self.lineEdit_saveModelPath.setMaximumSize(QtCore.QSize(16777215, 10000000))
        self.lineEdit_saveModelPath.setObjectName("lineEdit_saveModelPath")
        self.horizontalLayout_saveImage.addWidget(self.lineEdit_saveModelPath)
        self.pushButton_saveModel = QtWidgets.QPushButton(Dialog)
        self.pushButton_saveModel.setMinimumSize(QtCore.QSize(71, 23))
        self.pushButton_saveModel.setMaximumSize(QtCore.QSize(71, 23))
        self.pushButton_saveModel.setObjectName("pushButton_saveModel")
        self.pushButton_saveModel.clicked.connect(self.on_saveModel_clicked)#####################
        self.horizontalLayout_saveImage.addWidget(self.pushButton_saveModel)
        self.verticalLayout.addLayout(self.horizontalLayout_saveImage)
        self.pushButton_train = QtWidgets.QPushButton(Dialog)
        self.pushButton_train.setObjectName("pushButton_train")
        self.pushButton_train.clicked.connect(self.on_querySample_clicked)#####################
        self.verticalLayout.addWidget(self.pushButton_train, 0, QtCore.Qt.AlignHCenter)
        self.verticalLayoutMain.addLayout(self.verticalLayout)
        self.horizontalLayout_1.addLayout(self.verticalLayoutMain)
        self.gridLayout_3.addLayout(self.horizontalLayout_1, 0, 0, 1, 1)

        self.retranslateUi(Dialog)
        self.pushButton_train.clicked.connect(Dialog.accept) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(Dialog)

        self.comboBox_sampleClass.currentIndex = -1
        self.checkBox.stateChanged.connect(self.onHeaderCheckBoxStateChanged) 
        # 创建模型并设置数据
        self.model = QStandardItemModel()
        self.model.setHorizontalHeaderLabels(["名称", "类别", "尺寸", "数量", "选择"])  # 设置列头标签
        # 创建表格视图
        self.tableView_sampleList.setModel(self.model)
        self.tableView_sampleList.resizeColumnsToContents()        
        # 设置 QTableView 的列头可排序
        self.tableView_sampleList.horizontalHeader().setSectionsClickable(True)
        self.tableView_sampleList.horizontalHeader().setSortIndicatorShown(True)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "模型训练"))
        self.groupBox_SelectSample.setTitle(_translate("Dialog", "样本库选择："))
        self.label.setText(_translate("Dialog", "样本库查询："))
        self.pushButton_QuerySample.setText(_translate("Dialog", "查询"))
        self.label_7.setText(_translate("Dialog", "样本库列表："))
        self.checkBox.setToolTip(_translate("Dialog", "全选"))
        self.groupBox_setPara.setTitle(_translate("Dialog", "参数设置："))
        self.label_3.setText(_translate("Dialog", "迭代次数："))
        self.lineEdit_learningRate.setText(_translate("Dialog", "1e-4"))
        self.label_5.setText(_translate("Dialog", "批次样本量："))
        self.label_6.setText(_translate("Dialog", "学习率："))
        self.lineEdit_batch.setText(_translate("Dialog", "16"))
        self.lineEdit_epoch.setText(_translate("Dialog", "100"))
        self.comboBox_modelNet.setCurrentText(_translate("Dialog", "AUNet"))
        self.label_4.setText(_translate("Dialog", "模型网络："))
        self.label_2.setText(_translate("Dialog", "保存路径："))
        self.pushButton_saveModel.setText(_translate("Dialog", "浏览..."))
        self.pushButton_train.setText(_translate("Dialog", "开始训练"))

    def on_querySample_clicked(self):
        sampleClass = self.comboBox_sampleClass.currentText()
        self.sampleList = []
        #print(f"sampleClass={sampleClass}")    
        # XML文件的路径
        xml_file_path = './settings/SamplesConfig.xml'
        # 解析XML文件
        dom = minidom.parse(xml_file_path)#Samples
        # 获取根元素
        root = dom.documentElement
        # 遍历根元素的子元素
        for child in root.childNodes:#SampleClass
            # 检查节点类型，确保它是ELEMENT_NODE（即元素节点）
            if child.nodeType == child.ELEMENT_NODE:
                # 打印子元素的标签名、属性和文本内容
                #print(f"Child element: {child.tagName}")#SampleClass
                for __, attr_value in child.attributes.items():  
                    #print(f"attr_value: {attr_value}")                         
                    if attr_value == sampleClass:                                   
                        for child2 in child.childNodes:#SamplePath
                            if child2.nodeType == child2.ELEMENT_NODE:
                                #print(f"child2 element: {child2.tagName}")#SamplePath
                                samplePath = child2.firstChild.data.strip()
                                #print(f'{child2.attributes.items()},{samplePath}')
                                # 循环遍历列表并填充字典
                                # 初始化一个字典
                                data_dict = {}
                                for key, value in child2.attributes.items():
                                    data_dict[key] = value
                                name = data_dict['Name']
                                type = data_dict['Type']
                                size = data_dict['Size']
                                from glob import glob
                                count = len(glob(f'{samplePath}/image/*.tif'))
                                #print(f'{samplePath}/image/*.tif {count}')
                                checkbox_item = QStandardItem()
                                checkbox_item.setCheckable(True)
                                #checkbox_item.setCheckState(Qt.Unchecked)  # 可选：设置初始检查状态                               
                                row = [QStandardItem(name), QStandardItem(type), QStandardItem(size), QStandardItem(str(count)),checkbox_item]
                                self.sampleList.append(samplePath)
                                # 将复选框项添加到行列表中（假设您想在列表的末尾添加它）
                                self.model.appendRow(row)
        self.tableView_sampleList.resizeColumnsToContents()

    def onHeaderCheckBoxStateChanged(self, state):
        # 根据表头复选框的状态遍历模型中的所有行，并设置相应列的复选框项
        column_index = 4  # 假设复选框项在第三列（索引为4）
        # 获取选择模型
        selection_model = self.tableView_sampleList.selectionModel()
        # 获取所有选中的行索引（这里我们假设关心的是顶层项的选中情况，所以传入 0 作为列号）
        selected_rows = selection_model.selectedRows(0)       
        # 计算选中的行数
        number_of_selected_rows = len(selected_rows)       
        #print(f"Number of selected rows: {number_of_selected_rows}")
        if number_of_selected_rows>0:
            # 检查目标行是否在选中的行中
            for index in selected_rows:
                checkbox_item = self.model.item(index.row(), column_index)
                if checkbox_item.isCheckable():
                    checkbox_item.setCheckState(state)
        else:
            number_of_selected_rows = 0
            for row_index in range(self.model.rowCount()):
                
                checkbox_item = self.model.item(row_index, column_index)
                if checkbox_item.isCheckable():
                    checkbox_item.setCheckState(state)
                    
                check_state = self.model.item(row_index, column_index).checkState()
                if check_state == Qt.Checked:
                    number_of_selected_rows+=1

        QMessageBox.information(None, '提示', f"共选择{number_of_selected_rows}样本分库！", QMessageBox.Ok)

    def on_saveModel_clicked(self,Dialog):
        from PyQt5.QtWidgets import QFileDialog
        folder_selected = QFileDialog.getExistingDirectory(None, "Select Folder to Save")
        if  folder_selected:
            self.lineEdit_saveModelPath.setText(folder_selected)