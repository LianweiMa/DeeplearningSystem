# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ProcessDialog.ui'
#
# Created by: qgis.PyQt UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from qgis.PyQt import QtCore, QtGui, QtWidgets
from qgis.PyQt.QtWidgets import QMessageBox


class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(477, 256)
        Dialog.setWindowFlags(Dialog.windowFlags() & ~(QtCore.Qt.WindowContextHelpButtonHint)) # 隐藏对话框标题栏默认的问号按钮
        Dialog.setMinimumSize(QtCore.QSize(477, 256))
        Dialog.setMaximumSize(QtCore.QSize(477, 256))
        icon = QtGui.QIcon()
        from os.path import join
        from DeeplearningSystem import base_dir
        icon_Segment = join(base_dir, 'settings/icon', 'Segment.png') 
        icon.addPixmap(QtGui.QPixmap(icon_Segment), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        Dialog.setWindowIcon(icon)
        self.gridLayout_3 = QtWidgets.QGridLayout(Dialog)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.verticalLayoutMain = QtWidgets.QVBoxLayout()
        self.verticalLayoutMain.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.verticalLayoutMain.setObjectName("verticalLayoutMain")
        self.horizontalLayout_openImage = QtWidgets.QHBoxLayout()
        self.horizontalLayout_openImage.setSizeConstraint(QtWidgets.QLayout.SetNoConstraint)
        self.horizontalLayout_openImage.setSpacing(6)
        self.horizontalLayout_openImage.setObjectName("horizontalLayout_openImage")
        self.label = QtWidgets.QLabel(Dialog)
        self.label.setObjectName("label")
        self.horizontalLayout_openImage.addWidget(self.label)
        self.comboBox_openImage = QtWidgets.QComboBox(Dialog)
        self.comboBox_openImage.setEnabled(True)
        self.comboBox_openImage.setMinimumSize(QtCore.QSize(308, 20))
        self.comboBox_openImage.setMaximumSize(QtCore.QSize(308, 20))
        self.comboBox_openImage.setEditable(True)
        self.comboBox_openImage.setObjectName("comboBox_openImage")
        self.horizontalLayout_openImage.addWidget(self.comboBox_openImage, 0, QtCore.Qt.AlignLeft)
        self.pushButton_openImage = QtWidgets.QPushButton(Dialog)
        self.pushButton_openImage.setObjectName("pushButton_openImage")
        self.pushButton_openImage.clicked.connect(self.on_openImage_clicked)####################
        self.horizontalLayout_openImage.addWidget(self.pushButton_openImage)
        self.verticalLayoutMain.addLayout(self.horizontalLayout_openImage)
        self.horizontalLayout_saveImage = QtWidgets.QHBoxLayout()
        self.horizontalLayout_saveImage.setObjectName("horizontalLayout_saveImage")
        self.label_2 = QtWidgets.QLabel(Dialog)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_saveImage.addWidget(self.label_2)
        self.lineEdit_saveImage = QtWidgets.QLineEdit(Dialog)
        self.lineEdit_saveImage.setObjectName("lineEdit_saveImage")
        self.lineEdit_saveImage.setMinimumSize(QtCore.QSize(308, 20))
        self.lineEdit_saveImage.setMaximumSize(QtCore.QSize(308, 20))
        self.horizontalLayout_saveImage.addWidget(self.lineEdit_saveImage)
        self.pushButton_saveImage = QtWidgets.QPushButton(Dialog)
        self.pushButton_saveImage.setObjectName("pushButton_saveImage")
        self.pushButton_saveImage.clicked.connect(self.on_saveImage_clicked)###################
        self.horizontalLayout_saveImage.addWidget(self.pushButton_saveImage)
        self.verticalLayoutMain.addLayout(self.horizontalLayout_saveImage)
        self.groupBox_selectModel = QtWidgets.QGroupBox(Dialog)
        self.groupBox_selectModel.setCheckable(False)
        self.groupBox_selectModel.setObjectName("groupBox_selectModel")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.groupBox_selectModel)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.label_3 = QtWidgets.QLabel(self.groupBox_selectModel)
        self.label_3.setObjectName("label_3")
        self.gridLayout.addWidget(self.label_3, 0, 0, 1, 1)
        self.comboBox_modelNet = QtWidgets.QComboBox(self.groupBox_selectModel)
        self.comboBox_modelNet.setEditable(True)
        self.comboBox_modelNet.setObjectName("comboBox_modelNet")
        self.comboBox_modelNet.addItems([ "AUNet", "UNet", "DeepLabV3Plus" ])
        self.gridLayout.addWidget(self.comboBox_modelNet, 0, 3, 1, 1)
        self.pushButton_queryModel = QtWidgets.QPushButton(self.groupBox_selectModel)
        self.pushButton_queryModel.setObjectName("pushButton_queryModel")
        self.pushButton_queryModel.clicked.connect(self.on_queryModel_clicked)#################################
        self.gridLayout.addWidget(self.pushButton_queryModel, 0, 4, 1, 1)
        self.label_5 = QtWidgets.QLabel(self.groupBox_selectModel)
        self.label_5.setObjectName("label_5")
        self.gridLayout.addWidget(self.label_5, 1, 0, 1, 1)
        self.label_4 = QtWidgets.QLabel(self.groupBox_selectModel)
        self.label_4.setObjectName("label_4")
        self.gridLayout.addWidget(self.label_4, 0, 2, 1, 1)
        self.comboBox_modelList = QtWidgets.QComboBox(self.groupBox_selectModel)
        self.comboBox_modelList.setEditable(True)
        self.comboBox_modelList.setObjectName("comboBox_modelList")
        self.comboBox_modelList.setMinimumSize(QtCore.QSize(347, 20))
        self.comboBox_modelList.setMaximumSize(QtCore.QSize(347, 20))
        self.gridLayout.addWidget(self.comboBox_modelList, 1, 1, 1, 4)
        self.comboBox_modelType = QtWidgets.QComboBox(self.groupBox_selectModel)
        self.comboBox_modelType.setEditable(True)
        self.comboBox_modelType.setObjectName("comboBox_modelType")
        self.comboBox_modelType.addItems(["building", "road", "mine", "water", "forest", "pv", "greenhouse", "bareland"])
        self.gridLayout.addWidget(self.comboBox_modelType, 0, 1, 1, 1)
        self.verticalLayout_3.addLayout(self.gridLayout)
        self.verticalLayoutMain.addWidget(self.groupBox_selectModel)
        self.groupBox_setParas = QtWidgets.QGroupBox(Dialog)
        self.groupBox_setParas.setObjectName("groupBox_setParas")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.groupBox_setParas)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.gridLayout_2 = QtWidgets.QGridLayout()
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.label_7 = QtWidgets.QLabel(self.groupBox_setParas)
        self.label_7.setObjectName("label_7")
        self.gridLayout_2.addWidget(self.label_7, 0, 2, 1, 1)
        self.label_6 = QtWidgets.QLabel(self.groupBox_setParas)
        self.label_6.setObjectName("label_6")
        self.gridLayout_2.addWidget(self.label_6, 0, 0, 1, 1)
        self.lineEdit_parallelSize = QtWidgets.QLineEdit(self.groupBox_setParas)
        self.lineEdit_parallelSize.setObjectName("lineEdit_parallelSize")
        self.gridLayout_2.addWidget(self.lineEdit_parallelSize, 0, 5, 1, 1)
        self.label_8 = QtWidgets.QLabel(self.groupBox_setParas)
        self.label_8.setObjectName("label_8")
        self.gridLayout_2.addWidget(self.label_8, 0, 4, 1, 1)
        self.lineEdit_labelSize = QtWidgets.QLineEdit(self.groupBox_setParas)
        self.lineEdit_labelSize.setObjectName("lineEdit_labelSize")
        self.gridLayout_2.addWidget(self.lineEdit_labelSize, 0, 3, 1, 1)
        self.lineEdit_overlap = QtWidgets.QLineEdit(self.groupBox_setParas)
        self.lineEdit_overlap.setObjectName("lineEdit_overlap")
        self.gridLayout_2.addWidget(self.lineEdit_overlap, 0, 1, 1, 1)
        self.verticalLayout_2.addLayout(self.gridLayout_2)
        self.verticalLayoutMain.addWidget(self.groupBox_setParas)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.pushButton_process = QtWidgets.QPushButton(Dialog)
        self.pushButton_process.setObjectName("pushButton_process")############################
        self.pushButton_process.clicked.connect(Dialog.accept) # type: ignore
        self.verticalLayout.addWidget(self.pushButton_process, 0, QtCore.Qt.AlignHCenter)
        self.verticalLayoutMain.addLayout(self.verticalLayout)
        self.gridLayout_3.addLayout(self.verticalLayoutMain, 0, 0, 1, 1)

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

        self.__initial__()###############################    

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "地物提取"))
        self.label.setText(_translate("Dialog", "打开影像："))
        self.pushButton_openImage.setText(_translate("Dialog", "浏览..."))
        self.label_2.setText(_translate("Dialog", "保存影像："))
        self.pushButton_saveImage.setText(_translate("Dialog", "浏览..."))
        self.groupBox_selectModel.setTitle(_translate("Dialog", "模型选择："))
        self.label_3.setText(_translate("Dialog", "模型类别："))
        self.comboBox_modelNet.setCurrentText(_translate("Dialog", "AUNet"))
        self.pushButton_queryModel.setText(_translate("Dialog", "查询"))
        self.label_5.setText(_translate("Dialog", "选择模型："))
        self.label_4.setText(_translate("Dialog", "模型网络："))
        self.comboBox_modelType.setCurrentText(_translate("Dialog", "building"))
        self.groupBox_setParas.setTitle(_translate("Dialog", "参数设置："))
        self.label_7.setText(_translate("Dialog", "分块大小："))
        self.label_6.setText(_translate("Dialog", "重叠度："))
        self.lineEdit_parallelSize.setText(_translate("Dialog", "32"))
        self.label_8.setText(_translate("Dialog", "并行大小："))
        self.lineEdit_labelSize.setText(_translate("Dialog", "256"))
        self.lineEdit_overlap.setText(_translate("Dialog", "32"))
        self.pushButton_process.setText(_translate("Dialog", "开始处理"))

    def __initial__(self):
        from qgis.core import QgsProject, QgsRasterLayer
        #清空
        self.comboBox_openImage.clear()
        self.comboBox_openImage.currentIndex = -1
        for layer_name, layer in QgsProject.instance().mapLayers().items():
            if isinstance(layer, QgsRasterLayer):
                filepath = layer.dataProvider().dataSourceUri()
                self.comboBox_openImage.addItem(filepath)
        self.__initialmodel__()

    def __initialmodel__(self):
        #清空
        self.comboBox_modelList.clear()
        self.comboBox_modelList.currentIndex = -1
        from xml.dom import minidom

        # XML文件的路径
        from DeeplearningSystem import model_cofing_path
        # 解析XML文件
        dom = minidom.parse(model_cofing_path)#Models

        # 获取根元素
        root = dom.documentElement

        # 打印根元素的标签名
        #print(f"Root element: {root.tagName}")#Models

        # 遍历根元素的子元素
        for child in root.childNodes:#ModelClass
            # 检查节点类型，确保它是ELEMENT_NODE（即元素节点）
            if child.nodeType == child.ELEMENT_NODE:
                # 打印子元素的标签名、属性和文本内容
                #print(f"Child element: {child.tagName}")#ModelClass
                for __, attr_value in child.attributes.items():  
                    #print(f"attr_value: {attr_value}")                         
                    if attr_value == self.comboBox_modelType.currentText():                                   
                        for child2 in child.childNodes:#ModelType
                            if child2.nodeType == child2.ELEMENT_NODE:
                                #print(f"child2 element: {child2.tagName}")#ModelType
                                for __, attr_value2 in child2.attributes.items():                           
                                    if attr_value2 == self.comboBox_modelNet.currentText():
                                        #print(f"Root element: {root.tagName}")#Models
                                        #print(f"    Child element: {child.tagName}")#ModelClass
                                        #print(f"        child2 element: {child2.tagName}")#ModelType
                                        #print(f"            attr_value2: {attr_value2}")
                                        #print(f"  Text: {child2.firstChild.data.strip()}")
                                        from os.path import basename,exists
                                        self.m_modelFile = child2.firstChild.data.strip()
                                        self.comboBox_modelList.addItem(basename(self.m_modelFile))
                                        if not exists(self.m_modelFile):
                                            QMessageBox.information(None, '提示', f"查询不到模型文件，请检查其是否存在！\n{self.m_modelFile}", QMessageBox.Ok)
                                    else:                                     
                                        QMessageBox.information(self, '提示', "查询不到模型，请选择其它模型！", QMessageBox.Ok)                                                                     

    def on_openImage_clicked(self,Dialog):
        from qgis.PyQt.QtWidgets import QFileDialog
        path_to_tif,_ = QFileDialog.getOpenFileName(None, '打开', '', 'Raster Files (*.tif;*.tiff;*.img;*.dat);;All Files (*.*)')
        if  path_to_tif=="":
            return
        self.comboBox_openImage.setCurrentText(path_to_tif)

    def on_saveImage_clicked(self,Dialog):
        from qgis.PyQt.QtWidgets import QFileDialog
        path_to_tif,_ = QFileDialog.getSaveFileName(None, '保存', '', 'Raster Files (*.img);;All Files (*.*)')
        if  path_to_tif=="":
            return
        self.lineEdit_saveImage.setText(path_to_tif)

    def on_queryModel_clicked(self):
        self.__initialmodel__()